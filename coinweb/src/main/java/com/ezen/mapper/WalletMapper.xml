<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="coinweb.dao.WalletDAO">

	<insert id="getInsertResult">
		insert into wallet(id,coin,coin_name,available_balance,using_balance,tot_balance,state) 
					values(#{param1},'KRW','Won',30000000,0,30000000,'on'),
					(#{param1},'BTC','Bitcoin',0,0,0,'on'),
					(#{param1},'BCH','Bitcoin Cash',0,0,0,'on'),
					(#{param1},'ETH','Ethereum',0,0,0,'on'),
					(#{param1},'ETC','Ethereum Classic',0,0,0,'on'),
					(#{param1},'XRP','Ripple',0,0,0,'on'),
					(#{param1},'DASH','Dash',0,0,0,'on'),
					(#{param1},'LTC','Litecoin',0,0,0,'on'),
					(#{param1},'XMR','Monero',0,0,0,'on'),
					(#{param1},'ZEC','Zcash',0,0,0,'on'),
					(#{param1},'QTUM','Qtum',0,0,0,'on')
	</insert>

	<select id="getWalletResult" resultType="coinweb.vo.WalletVO">
		select KRW.available_balance, KRW.using_balance, KRW.tot_balance,
				coin.coin, coin.available_balance as coin_avail, coin.using_balance as coin_using, coin.tot_balance as coin_tot, coin.state
				from wallet KRW, wallet coin where KRW.id=#{param1} and KRW.id=coin.id and KRW.coin='KRW' and coin.coin=#{param2}	
	</select>
	
	<select id="getWalletListResult" resultType="coinweb.vo.WalletVO">
		select coin, coin_name, available_balance, using_balance, tot_balance, tot_balance as coin_tot, state from wallet where id=#{id}
	</select>
	
	<update id="getWalletUpdate">
		update wallet set
		<choose>
		 <when test="param5 != null and (param5 eq 'B'.toString())">
		 	using_balance=using_balance+(#{param3}*#{param4}) where id=#{param1} and coin='KRW'
		 </when>
		 <when test="param5 != null and (param5 eq 'S'.toString())">
		 	using_balance=using_balance+#{param4} where id=#{param1} and coin=#{param2}
		 </when>
		</choose>
	</update>
	
	<update id="getWalletCancel">
		update wallet set 
		<choose>
		 <when test="type != null and (type eq 'B'.toString())">
		 	using_balance=using_balance-((#{price}*#{amount})-#{price_completed}) where id=#{id} and coin='KRW'
		 </when>
		 <when test="type != null and (type eq 'S'.toString())">
		 	using_balance=using_balance-(#{amount}-#{amount_completed}) where id=#{id} and coin=#{coin}
		 </when>
		</choose>
	</update>
	
	<update id="getOrderingUpdate">
		update wallet set 
		<choose>
		 <when test="param5 != null and (param5 eq 'B'.toString())">
		 	available_balance=available_balance-#{param3}, using_balance=using_balance-#{param3} where id=#{param1} and coin='KRW'
		 </when>
		 <when test="param5 != null and (param5 eq 'S'.toString())">
		 	available_balance=available_balance-#{param4}, using_balance=using_balance-#{param4}, tot_balance=tot_balance-#{param4} where id=#{param1} and coin=#{param2}
		 </when>
		</choose>
	</update>
	
	<update id="getOrderingUpdate2">
		update wallet set 
		<choose>
		 <when test="param5 != null and (param5 eq 'B'.toString())">
		 	available_balance=available_balance+#{param4}, tot_balance=tot_balance+#{param4} where id=#{param1} and coin=#{param2}
		 </when>
		 <when test="param5 != null and (param5 eq 'S'.toString())">
		 	available_balance=available_balance+#{param3} where id=#{param1} and coin='KRW'
		 </when>
		</choose>
	</update>
	
	<update id="getWalletTotalUpdate">
		update wallet set tot_balance = #{param2} where id=#{param1} and coin='KRW'
	</update>
</mapper>    